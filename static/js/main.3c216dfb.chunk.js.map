{"version":3,"sources":["state.ts","Components/AddRound.tsx","Components/AddActual.tsx","Components/Round.tsx","Components/Player.tsx","Components/Players.tsx","Components/AddPlayer.tsx","Components/Score.tsx","Components/Scores.tsx","Components/NewGame.tsx","Components/Rounds.tsx","Components/History.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","defaultState","players","StateContext","createContext","state","dispatch","action","reducer","console","log","type","ADD_PLAYER","newPlayer","value","name","rounds","REMOVE_PLAYER","playerIndex","splice","ADD_PLAYER_ACTUAL","map","player","index","roundNumber","actual","number","ADD_PLAYER_GUESS","guess","NEW_GAME","Error","AddRound","useContext","Typography","sx","fontSize","color","gutterBottom","ButtonGroup","variant","aria-label","Array","from","keys","round","Button","onClick","AddActual","disabled","Round","Grid","item","xs","Number","isInteger","Player","React","numRounds","Object","length","currentRound","isNewGame","shouldShowNewRound","shouldShowRound","Box","minWidth","Card","Fragment","CardContent","component","CardActions","IconButton","Players","container","AddPlayer","useState","playerName","setPlayerName","onSubmit","e","preventDefault","TextField","id","label","onChange","target","CardActionArea","getScores","values","reduce","acc","Math","abs","getScore","Score","Scores","NewGame","Rounds","History","App","useReducer","Provider","CssBaseline","AppBar","position","elevation","borderBottom","t","palette","divider","Toolbar","noWrap","Container","maxWidth","bgcolor","minHeight","paddingTop","paddingBottom","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c216dfb.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport type Round = {\n  guess: number;\n  actual: number | null;\n  number: number;\n};\n\nexport type Player = {\n  name: string;\n  rounds: Record<number, Round>;\n};\n\ntype State = {\n  players: Array<Player>;\n};\n\nexport enum ActionType {\n  \"ADD_PLAYER\",\n  \"REMOVE_PLAYER\",\n  \"ADD_PLAYER_GUESS\",\n  \"ADD_PLAYER_ACTUAL\",\n  \"NEW_GAME\",\n}\nexport const defaultState = {\n  players: [] as Array<Player>,\n};\n\nexport const StateContext = createContext({\n  state: defaultState,\n  dispatch: (action: Action) => {},\n});\n\ntype Action = {\n  type: ActionType;\n  value: any;\n};\n\nexport function reducer(state: State, action: Action): State {\n  console.log({ state, action });\n  switch (action.type) {\n    case ActionType.ADD_PLAYER:\n      const newPlayer = action.value;\n      return {\n        ...state,\n        players: [\n          ...state.players,\n          {\n            name: newPlayer,\n            rounds: {},\n          },\n        ],\n      };\n    case ActionType.REMOVE_PLAYER:\n      const playerIndex = action.value;\n      return {\n        ...state,\n        players: state.players.splice(playerIndex + 1, 1),\n      };\n    case ActionType.ADD_PLAYER_ACTUAL:\n      return {\n        ...state,\n        players: state.players.map((player, index) => {\n          if (index !== action.value.playerIndex) {\n            return player;\n          }\n          return {\n            ...player,\n            rounds: {\n              ...player.rounds,\n              [action.value.roundNumber]: {\n                ...player.rounds[action.value.roundNumber],\n                actual: action.value.number,\n              },\n            },\n          };\n        }),\n      };\n    case ActionType.ADD_PLAYER_GUESS:\n      return {\n        ...state,\n        players: state.players.map((player, index) => {\n          if (index !== action.value.playerIndex) {\n            return player;\n          }\n          return {\n            ...player,\n            rounds: {\n              ...player.rounds,\n              [action.value.roundNumber]: {\n                ...player.rounds[action.value.roundNumber],\n                guess: action.value.number,\n                number: action.value.roundNumber,\n              },\n            },\n          };\n        }),\n      };\n    case ActionType.NEW_GAME:\n      return {\n        players: state.players.map((player) => {\n          return {\n            ...player,\n            rounds: {},\n          };\n        }),\n      };\n    default:\n      throw new Error();\n  }\n}\n","import React, { useContext } from \"react\";\nimport { StateContext, ActionType } from \"../state\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport { Typography } from \"@mui/material\";\n\nexport function AddRound({\n  roundNumber,\n  playerIndex,\n}: {\n  roundNumber: number;\n  playerIndex: number;\n}) {\n  const { dispatch } = useContext(StateContext);\n\n  return (\n    <div>\n      <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n        guess\n      </Typography>\n      <ButtonGroup variant=\"contained\" aria-label=\"Create new round\">\n        {Array.from(Array(roundNumber + 1).keys()).map((round, index) => {\n          return (\n            <Button\n              key={round}\n              onClick={() => {\n                dispatch({\n                  type: ActionType.ADD_PLAYER_GUESS,\n                  value: {\n                    roundNumber,\n                    playerIndex,\n                    number: round,\n                  },\n                });\n              }}\n            >\n              {round}\n            </Button>\n          );\n        })}\n      </ButtonGroup>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { StateContext, ActionType } from \"../state\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\n\nexport function AddActual({\n  roundNumber,\n  playerIndex,\n  actual,\n}: {\n  roundNumber: number;\n  playerIndex: number;\n  actual: number | null;\n}) {\n  const { dispatch } = useContext(StateContext);\n\n  return (\n    <div>\n      <div>Actual</div>\n      <ButtonGroup variant=\"contained\" aria-label=\"Add Actual score\">\n        {Array.from(Array(roundNumber + 1).keys()).map((round, index) => {\n          return (\n            <Button\n              key={round}\n              onClick={() => {\n                dispatch({\n                  type: ActionType.ADD_PLAYER_ACTUAL,\n                  value: {\n                    roundNumber,\n                    playerIndex,\n                    number: round,\n                  },\n                });\n              }}\n              disabled={round === actual}\n            >\n              {round}\n            </Button>\n          );\n        })}\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport { Round as RoundType } from \"../state\";\nimport { AddActual } from \"./AddActual\";\n\nexport function Round({\n  round,\n  playerIndex,\n}: {\n  round: RoundType;\n  playerIndex: number;\n}) {\n  return (\n    <Grid item xs={4}>\n      <div>Round: {round.number}</div>\n      <div>Guess: {round.guess}</div>\n      {Number.isInteger(round?.actual) ? (\n        <div>Actual: {round.actual}</div>\n      ) : (\n        <AddActual\n          roundNumber={round.number}\n          playerIndex={playerIndex}\n          actual={round.actual}\n        />\n      )}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { ActionType, Player as PlayerType, StateContext } from \"../state\";\nimport { AddRound } from \"./AddRound\";\nimport RemoveCircleOutlineIcon from \"@mui/icons-material/RemoveCircleOutline\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  Typography,\n} from \"@mui/material\";\nimport { Round } from \"./Round\";\nimport { Box } from \"@mui/system\";\n\nexport function Player({\n  player,\n  index,\n}: {\n  player: PlayerType;\n  index: number;\n}) {\n  const { dispatch } = React.useContext(StateContext);\n  const numRounds = Object.keys(player.rounds).length;\n  const currentRound = player.rounds[numRounds];\n  const isNewGame = numRounds === 0;\n  const shouldShowNewRound =\n    Number.isInteger(currentRound?.actual) || isNewGame;\n  const shouldShowRound = !isNewGame && !shouldShowNewRound;\n  return (\n    <Grid item xs={12}>\n      <Box sx={{ minWidth: 275 }}>\n        <Card variant=\"outlined\">\n          <React.Fragment>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                player\n              </Typography>\n              <Typography variant=\"h5\" component=\"div\">\n                {player.name}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              {shouldShowNewRound && (\n                <AddRound playerIndex={index} roundNumber={numRounds + 1} />\n              )}\n              {shouldShowRound && (\n                <Round round={player.rounds[numRounds]} playerIndex={index} />\n              )}\n              <IconButton\n                onClick={() => {\n                  dispatch({\n                    type: ActionType.REMOVE_PLAYER,\n                    value: index,\n                  });\n                }}\n              >\n                <RemoveCircleOutlineIcon />\n              </IconButton>\n            </CardActions>\n          </React.Fragment>\n        </Card>\n      </Box>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { StateContext } from \"../state\";\nimport { Player } from \"./Player\";\nimport Grid from \"@mui/material/Grid\";\nimport { Typography } from \"@mui/material\";\n\nexport function Players() {\n  const { state } = React.useContext(StateContext);\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"div\">\n        Players\n      </Typography>\n      <Grid container>\n        {state.players.map((player, index) => (\n          <Player key={index} index={index} player={player} />\n        ))}\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { StateContext, ActionType } from \"../state\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TextField from \"@mui/material/TextField\";\nimport { Card, CardActionArea, CardContent } from \"@mui/material\";\n\nexport function AddPlayer() {\n  const [playerName, setPlayerName] = React.useState(\"\");\n  const { dispatch } = useContext(StateContext);\n  return (\n    <Card>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          dispatch({\n            type: ActionType.ADD_PLAYER,\n            value: playerName,\n          });\n          setPlayerName(\"\");\n        }}\n      >\n        <CardContent>\n          <TextField\n            id=\"newPlayerName\"\n            label=\"Add Player\"\n            variant=\"outlined\"\n            value={playerName}\n            onChange={(e) => setPlayerName(e.target.value)}\n          />\n        </CardContent>\n        <CardActionArea>\n          <IconButton type=\"submit\">\n            <AddIcon />\n          </IconButton>\n        </CardActionArea>\n      </form>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Round as RoundType, Player } from \"../state\";\n\nexport function getScore(round: RoundType): number {\n  if (typeof round.actual !== \"number\" || typeof round.guess !== \"number\") {\n    return 0;\n  }\n  if (round.guess === round.actual) {\n    return 20 + 10 * round.guess;\n  } else {\n    return Math.abs(round.guess - round.actual) * -10;\n  }\n}\nfunction getScores(rounds: Player[\"rounds\"]): number {\n  return Object.values(rounds).reduce((acc, round) => {\n    return acc + getScore(round);\n  }, 0);\n}\n\nexport function Score({ player }: { player: Player }) {\n  return (\n    <li>\n      <div>{player.name}</div>\n      <div>Score: {getScores(player.rounds)}</div>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { StateContext } from \"../state\";\nimport { Score } from \"./Score\";\n\nexport function Scores() {\n  const { state } = React.useContext(StateContext);\n  return (\n    <ul>\n      <div>Scores</div>\n      {state.players.map((player, index) => (\n        <Score key={index} player={player} />\n      ))}\n    </ul>\n  );\n}\n","import { Button } from \"@mui/material\";\nimport React, { useContext } from \"react\";\nimport { StateContext, ActionType } from \"../state\";\n\nexport function NewGame() {\n  const { dispatch } = useContext(StateContext);\n  return (\n    <Button\n      onClick={() => {\n        dispatch({ type: ActionType.NEW_GAME, value: {} });\n      }}\n    >\n      New Game\n    </Button>\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport { Player } from \"../state\";\nimport { Round } from \"./Round\";\n\nexport function Rounds({\n  rounds,\n  playerIndex,\n}: {\n  rounds: Player[\"rounds\"];\n  playerIndex: number;\n}) {\n  //   const { state } = React.useContext(StateContext);\n  return (\n    <Grid container>\n      {Object.values(rounds).map((round, index) => {\n        return <Round key={index} round={round} playerIndex={playerIndex} />;\n      })}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { StateContext } from \"../state\";\n\nimport Grid from \"@mui/material/Grid\";\nimport { Rounds } from \"./Rounds\";\n\nexport function History() {\n  const { state } = React.useContext(StateContext);\n  return (\n    <div>\n      <div>History</div>\n      <Grid container>\n        {state.players.map((player, index) => (\n          <Grid item xs={12}>\n            <div>{player.name}</div>\n            <Rounds key={index} playerIndex={index} rounds={player.rounds} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { StateContext, defaultState, reducer } from \"./state\";\nimport { Players } from \"./Components/Players\";\nimport { AddPlayer } from \"./Components/AddPlayer\";\nimport { Scores } from \"./Components/Scores\";\nimport { NewGame } from \"./Components/NewGame\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport { History } from \"./Components/History\";\nimport { AppBar, Toolbar, Typography } from \"@mui/material\";\n/*\n  State\n    List of players\n      Current Score\n      array of guesses \n      array of actuals \n\n */\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, defaultState);\n  return (\n    <StateContext.Provider value={{ state, dispatch }}>\n      <React.Fragment>\n        <CssBaseline />\n        <AppBar\n          position=\"absolute\"\n          color=\"transparent\"\n          elevation={0}\n          sx={{\n            position: \"relative\",\n            borderBottom: (t) => `1px solid ${t.palette.divider}`,\n          }}\n        >\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Wizard Scoring App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container maxWidth=\"lg\">\n          <Box\n            sx={{\n              bgcolor: \"white\",\n              minHeight: \"100vh\",\n              paddingTop: \"1rem\",\n              paddingBottom: \"1rem\",\n            }}\n          >\n            <Grid container>\n              <Grid item xs={12} md={2}>\n                <AddPlayer />\n                <NewGame />\n                <Scores />\n              </Grid>\n              <Grid item xs={12} md={8}>\n                <Players />\n                <History />\n              </Grid>\n            </Grid>\n          </Box>\n        </Container>\n      </React.Fragment>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}